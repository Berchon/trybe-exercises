<div><h2 class="text-center challenge-title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Redux: Combine vários redutores</font></font></h2><div class="challenge-instructions redux"><div><section id="description">
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Quando o estado do seu aplicativo começa a ficar mais complexo, pode ser tentador dividir o estado em várias partes. </font><font style="vertical-align: inherit;">Em vez disso, lembre-se do primeiro princípio do Redux: todo o estado do aplicativo é mantido em um único objeto de estado na loja. </font><font style="vertical-align: inherit;">Portanto, Redux fornece composição de redutor como uma solução para um modelo de estado complexo. </font><font style="vertical-align: inherit;">Você define vários redutores para lidar com diferentes partes do estado do seu aplicativo e, em seguida, compõe esses redutores juntos em um redutor raiz. </font><font style="vertical-align: inherit;">O redutor de raiz é então passado para o </font></font><code>createStore()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">método </font><font style="vertical-align: inherit;">Redux </font><font style="vertical-align: inherit;">.</font></font></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Para nos permitir combinar vários redutores, Redux fornece o </font></font><code>combineReducers()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">método. </font><font style="vertical-align: inherit;">Este método aceita um objeto como um argumento no qual você define propriedades que associam teclas a funções de redutor específicas. </font><font style="vertical-align: inherit;">O nome que você der às chaves será usado pelo Redux como o nome da parte de estado associada.</font></font></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Normalmente, é uma boa prática criar um redutor para cada parte do estado do aplicativo quando eles são distintos ou exclusivos de alguma forma. </font><font style="vertical-align: inherit;">Por exemplo, em um aplicativo de anotações com autenticação do usuário, um redutor pode lidar com a autenticação enquanto outro lida com o texto e as notas que o usuário está enviando. </font><font style="vertical-align: inherit;">Para tal aplicação, podemos escrever o </font></font><code>combineReducers()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">método como este:</font></font></p><p></p><pre class=" language-js"><code class=" language-js"><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> Redux<span class="token punctuation">.</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  auth<span class="token operator">:</span> authenticationReducer<span class="token punctuation">,</span>
  notes<span class="token operator">:</span> notesReducer
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Agora, a chave </font></font><code>notes</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">conterá todos os estados associados às nossas notas e manipulados por nosso </font></font><code>notesReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">. </font><font style="vertical-align: inherit;">É assim que vários redutores podem ser compostos para gerenciar estados de aplicativos mais complexos. </font><font style="vertical-align: inherit;">Neste exemplo, o estado de suspensão na loja Redux seria, então, um único objecto contendo </font></font><code>auth</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">e </font></font><code>notes</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">propriedades.</font></font></p>
</section></div><hr><div><section id="instructions">
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Existem </font><font style="vertical-align: inherit;">funções </font></font><code>counterReducer()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">e </font></font><code>authReducer()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">fornecidas no editor de código, juntamente com uma loja Redux. </font><font style="vertical-align: inherit;">Termine de escrever a </font></font><code>rootReducer()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">função usando o </font></font><code>Redux.combineReducers()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">método. </font><font style="vertical-align: inherit;">Atribuir </font></font><code>counterReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">a uma tecla chamada </font></font><code>count</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">e </font></font><code>authReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">a uma tecla chamada </font></font><code>auth</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p></section></div><hr></div></div>

<div class="challenge-test-suite"><div aria-label="Pass - <p>The counterReducer should increment and decrement the state.</p>" class="test-result"><div class="test-status-icon"><span class="sr-only">Passed</span><svg height="50" viewBox="0 0 200 200" width="50" xmlns="http://www.w3.org/2000/svg"><g><title>Passed</title><circle cx="100" cy="99" fill="var(--primary-color)" r="95" stroke="var(--primary-color)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null"></circle><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(-45, 120, 106.321)" width="128.85878" x="55.57059" y="91.32089"></rect><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(45, 66.75, 123.75)" width="80.66548" x="26.41726" y="108.75"></rect></g></svg></div><div aria-hidden="true" class="test-output" xs="10"><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O </font></font><code>counterReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">deve aumentar e diminuir o </font></font><code>state</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p></div></div><div aria-label="Pass - <p>The authReducer should toggle the state of authenticated between true and false.</p>" class="test-result"><div class="test-status-icon"><span class="sr-only">Passed</span><svg height="50" viewBox="0 0 200 200" width="50" xmlns="http://www.w3.org/2000/svg"><g><title>Passed</title><circle cx="100" cy="99" fill="var(--primary-color)" r="95" stroke="var(--primary-color)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null"></circle><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(-45, 120, 106.321)" width="128.85878" x="55.57059" y="91.32089"></rect><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(45, 66.75, 123.75)" width="80.66548" x="26.41726" y="108.75"></rect></g></svg></div><div aria-hidden="true" class="test-output" xs="10"><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">A </font></font><code>authReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">deve alternar a </font></font><code>state</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">de </font></font><code>authenticated</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">entre </font></font><code>true</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">e </font></font><code>false</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p></div></div><div aria-label="Pass - <p>The store state should have two keys: count, which holds a number, and auth, which holds an object. The auth object should have a property of authenticated, which holds a boolean.</p>" class="test-result"><div class="test-status-icon"><span class="sr-only">Passed</span><svg height="50" viewBox="0 0 200 200" width="50" xmlns="http://www.w3.org/2000/svg"><g><title>Passed</title><circle cx="100" cy="99" fill="var(--primary-color)" r="95" stroke="var(--primary-color)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null"></circle><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(-45, 120, 106.321)" width="128.85878" x="55.57059" y="91.32089"></rect><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(45, 66.75, 123.75)" width="80.66548" x="26.41726" y="108.75"></rect></g></svg></div><div aria-hidden="true" class="test-output" xs="10"><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">A loja </font></font><code>state</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">deve ter duas chaves </font></font><code>count</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:, que contém um número e </font></font><code>auth</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, que contém um objeto. </font><font style="vertical-align: inherit;">O </font></font><code>auth</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">objeto deve ter uma propriedade de </font></font><code>authenticated</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, que contém um booleano.</font></font></p></div></div><div aria-label="Pass - <p>The rootReducer should be a function that combines the counterReducer and the authReducer.</p>" class="test-result"><div class="test-status-icon"><span class="sr-only">Passed</span><svg height="50" viewBox="0 0 200 200" width="50" xmlns="http://www.w3.org/2000/svg"><g><title>Passed</title><circle cx="100" cy="99" fill="var(--primary-color)" r="95" stroke="var(--primary-color)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null"></circle><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(-45, 120, 106.321)" width="128.85878" x="55.57059" y="91.32089"></rect><rect fill="var(--primary-background)" height="30" stroke="var(--primary-background)" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" transform="rotate(45, 66.75, 123.75)" width="80.66548" x="26.41726" y="108.75"></rect></g></svg></div><div aria-hidden="true" class="test-output" xs="10"><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O </font></font><code>rootReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">deve ser uma função que combina o </font></font><code>counterReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">e o </font></font><code>authReducer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p></div></div></div>



const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    default:
      return state;
  }
};

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const authReducer = (state = {authenticated: false}, action) => {
  switch(action.type) {
    case LOGIN:
      return {
        authenticated: true
      }
    case LOGOUT:
      return {
        authenticated: false
      }
    default:
      return state;
  }
};

// Define the root reducer here
const rootReducer = Redux.combineReducers({
  count: counterReducer,
  auth: authReducer,
});
const store = Redux.createStore(rootReducer);
